# ${registry}/java:oracle-8u101-jdk-alpine
#
# The main caveat to note is that it does use musl libc instead of glibc and friends,
# so certain software might run into issues depending on the depth of their libc requirements.
# However, most software doesn't have an issue with this,
# so this variant is usually a very safe choice.
#
FROM alpine:3.4

ARG build_fileserver

# Smaller Java images with Alpine Linux
# see: https://developer.atlassian.com/blog/2015/08/minimal-java-docker-containers/

# Install cURL
RUN echo "https://mirror.tuna.tsinghua.edu.cn/alpine/v3.4/main" > /etc/apk/repositories && \
    echo "https://mirror.tuna.tsinghua.edu.cn/alpine/v3.4/community" >> /etc/apk/repositories && \
    echo "https://mirror.tuna.tsinghua.edu.cn/alpine/edge/testing/" >> /etc/apk/repositories && \
    echo "https://mirror.tuna.tsinghua.edu.cn/alpine/edge/unmaintained/" >> /etc/apk/repositories && \
    apk --update add tzdata && \
    apk add bash ca-certificates curl font-adobe-100dpi git libstdc++ openssh tar && \
    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone && \
    apk del tzdata && \
    rm -rf /tmp/* /var/cache/apk/* && \
    echo "UTC+8:00" > /etc/TZ

ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

ADD docker/install_waitforit.sh /root/
RUN /root/install_waitforit.sh

ADD docker/install_glibc.sh /root/
RUN /root/install_glibc.sh

ENV JAVA_OPTS -Duser.language=zh -Duser.region=CN -Dfile.encoding=UTF-8 -Duser.timezone=Asia/Shanghai

ADD docker/install_oracle_jdk.sh /root/
RUN /root/install_oracle_jdk.sh

COPY docker/ejstatd-1.0.0.jar /opt/ejstatd/ejstatd-1.0.0.jar
# Need libstdc++.so.6 in libstdc++
# Could not find agent library /opt/jprofiler/bin/linux-x64/libjprofilerti.so in absolute path, with error: libstdc++.so.6: cannot open shared object file: No such file or directory
COPY docker/jprofiler/bin/linux-x64/libattach.so /opt/jprofiler/bin/linux-x64/libattach.so
COPY docker/jprofiler/bin/linux-x64/libjprofilerti.so /opt/jprofiler/bin/linux-x64/libjprofilerti.so
COPY docker/java_debug_monitor_profiler.sh /opt/java_debug_monitor_profiler.sh

# Set environment
ENV LD_LIBRARY_PATH /lib:/usr/lib:/usr/local/lib
ENV JAVA_HOME /opt/jdk
ENV PATH ${PATH}:${JAVA_HOME}/bin
